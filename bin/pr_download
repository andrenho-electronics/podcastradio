#!/usr/bin/env python3

import configparser
import logging
import sqlite3
import time

class Config:
    def __init__(self):
        self.podcasts = []

def read_config_file():
    cfg = Config()
    config = configparser.ConfigParser(delimiters=('=',), allow_no_value=True)
    config.read('download.ini')
    for key in config['podcasts']:
        cfg.podcasts.append(key)
    return cfg

def open_database():
    # {{{ nested functions

    def create_database_objects(conn):
        conn.cursor().execute('''
            CREATE TABLE IF NOT EXISTS podcasts (
                url TEXT PRIMARY KEY,
                title TEXT
            );

            CREATE TABLE IF NOT EXISTS episodes (
                podcast_url TEXT,
                episode_url TEXT,
                title TEXT,
                date INTEGER,
                length INTEGER,
                PRIMARY KEY(podcast_url, episode_url),
                FOREIGN KEY(podcast_url) REFERENCES podcasts(url)
            );
        ''')

    # }}}
    conn = sqlite3.connect('podcastradio.db')
    create_database_objects(conn)
    return conn

def check_podcasts(cfg, db):
    # {{{ nested functions

    def check_config_against_db(cfg, db):
        c = db.cursor()
        urls_in_db = []
        # URLs in db but not in config - delete from DB
        for row in c.execute('SELECT url FROM podcasts'):
            if row[0] not in cfg.podcasts:
                c.execute('DELETE FROM podcasts WHERE url=?', (row[0],))
                logging.info('URL ' + row[0] + ' was deleted from database.')
            else:
                urls_in_db.append(row[0])
        # URLs in config but not in db - insert to db
        for url in cfg.podcasts:
            if url not in urls_in_db:
                c.execute('INSERT INTO podcasts (url) VALUES (?)', (url,))
                logging.info('URL ' + url + ' was inserted into database.')
        db.commit()

    # }}}
    check_config_against_db(cfg, db)

# }}}

if __name__ == '__main__':
    logging.basicConfig(level='DEBUG')
    db = open_database()
    while True:
        cfg = read_config_file()
        check_podcasts(cfg, db)
        time.sleep(60)

# vim: foldmethod=marker
