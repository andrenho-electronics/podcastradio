#!/usr/bin/env python3

import configparser
from email.utils import parsedate_tz
import logging
from pprint import pprint
import sqlite3
import time
import urllib.request
import xml.etree.ElementTree as ET  


# CONFIG #######################################################################

class Config:
    def __init__(self):
        self.podcasts = []

def read_config_file():
    cfg = Config()
    config = configparser.ConfigParser(delimiters=('=',), allow_no_value=True)
    config.read('download.ini')
    for key in config['podcasts']:
        cfg.podcasts.append(key)
    return cfg


# DATABASE #####################################################################

def open_database():

    def create_database_objects(conn):
        conn.cursor().execute('''
            CREATE TABLE IF NOT EXISTS podcasts (
                url TEXT PRIMARY KEY,
                title TEXT
            );
        ''')
        conn.cursor().execute('''
            CREATE TABLE IF NOT EXISTS episodes (
                podcast_url TEXT,
                episode_url TEXT,
                title TEXT,
                date INTEGER,
                length TEXT,
                PRIMARY KEY(podcast_url, episode_url),
                FOREIGN KEY(podcast_url) REFERENCES podcasts(url)
            );
        ''')

    conn = sqlite3.connect('podcastradio.db')
    create_database_objects(conn)
    return conn


# PODCASTS #####################################################################

def check_podcasts(cfg, db):

    def check_config_against_db(cfg, db):
        c = db.cursor()
        urls_in_db = []
        # URLs in db but not in config - delete from DB
        for row in c.execute('SELECT url FROM podcasts'):
            if row[0] not in cfg.podcasts:
                c.execute('DELETE FROM podcasts WHERE url=?', (row[0],))
                logging.info('URL ' + row[0] + ' was deleted from database.')
            else:
                urls_in_db.append(row[0])
        # URLs in config but not in db - insert to db
        for url in cfg.podcasts:
            if url not in urls_in_db:
                c.execute('INSERT INTO podcasts (url) VALUES (?)', (url,))
                urls_in_db.append(url)
                logging.info('URL ' + url + ' was inserted into database.')
        db.commit()
        return urls_in_db

    def download_podcast_rss(url):
        xml = download_file(url)
        logging.debug('Podcast XML file downloaded from URL ' + url)
        return xml

    def parse_podcast_rss(xml):
        class PodcastInfo:
            pass
        class Episode:
            pass
        info = PodcastInfo()
        root = ET.fromstring(xml)
        info.title = root.find('./channel/title').text
        info.episodes = []
        for item in root.findall('./channel/item'):
            ep = Episode()
            ep.url = item.find('enclosure').attrib['url']
            ep.title = item.find('title').text
            ep.date = int(time.mktime(parsedate_tz(item.find('pubDate').text)[0:9]))  # date in unix timestamp format
            try:
                ep.length = item.find('{http://www.itunes.com/dtds/podcast-1.0.dtd}duration').text
            except AttributeError:
                pass
            info.episodes.append(ep)
        pprint(vars(info.episodes[0]))
        logging.debug('Parsed data from podcast RSS: ' + info.title)
        return info

    def update_podcast_database(url, db, info):
        pass

    urls = check_config_against_db(cfg, db)
    for url in urls:
        xml = download_podcast_rss(url)
        info = parse_podcast_rss(xml)
        update_podcast_database(url, db, info)


# UTIL #########################################################################

def download_file(url):
    response = urllib.request.urlopen(url)
    data = response.read()
    return data.decode('utf-8')


# MAIN #########################################################################

if __name__ == '__main__':
    logging.basicConfig(level='DEBUG')
    db = open_database()
    while True:
        logging.info('Executing loop...')
        cfg = read_config_file()
        check_podcasts(cfg, db)
        time.sleep(120)

# vim: foldmethod=marker
